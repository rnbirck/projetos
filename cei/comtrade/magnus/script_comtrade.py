# %%
import pandas as pd
import comtradeapicall


pd.set_option("display.float_format", lambda x: "%.0f" % x)
subscription_key = "cab30bdb6ad34b5e8b7bef73cadb9b68"
lista_sitc = [
    "06111",
    "06112",
    "06121",
    "06129",
    "59883",
    "5839",
    "5812",
    "5814",
    "5815",
    "5816",
    "5817",
    "89331",
    "58219",
    "58223",
    "89319",
    "89395",
    "62129",
    "62132",
    "62133",
    "62141",
    "62142",
    "62143",
    "62144",
    "62145",
    "62921",
    "6251",
    "6252",
    "62551",
    "62559",
    "62594",
    "62591",
    "62992",
    "62999",
    "6121",
    "63319",
    "63329",
    "64156",
    "64245",
    "64299",
    "89286",
    "65961",
    "65969",
    "65773",
    "65893",
    "66381",
    "66382",
    "66336",
    "66391",
    "66471",
    "66472",
    "66481",
    "66489",
    "66595",
    "67914",
    "67916",
    "67917",
    "67943",
    "67951",
    "67952",
    "67953",
    "67954",
    "67959",
    "69243",
    "69311",
    "74831",
    "74832",
    "74839",
    "69921",
    "6941",
    "69421",
    "69422",
    "69941",
    "69962",
    "69963",
    "69965",
    "69967",
    "69969",
    "68271",
    "68272",
    "69432",
    "69433",
    "69942",
    "69973",
    "68322",
    "68421",
    "68426",
    "68427",
    "69244",
    "6944",
    "6953",
    "69561",
    "69911",
    "69913",
    "69915",
    "69951",
    "69933",
    "69953",
    "69954",
    "71321",
    "71322",
    "71381",
    "71323",
    "71382",
    "71391",
    "71392",
    "71891",
    "71893",
    "71892",
    "71899",
    "74219",
    "74271",
    "7422",
    "7424",
    "7425",
    "7426",
    "74291",
    "74295",
    "74311",
    "74315",
    "74317",
    "74343",
    "74319",
    "7438",
    "74155",
    "74159",
    "74145",
    "74149",
    "74174",
    "74189",
    "74363",
    "74367",
    "74364",
    "74369",
    "74395",
    "74564",
    "74565",
    "74568",
    "74443",
    "74449",
    "74439",
    "72311",
    "72312",
    "72331",
    "72333",
    "72321",
    "72322",
    "72329",
    "72335",
    "72337",
    "72339",
    "72346",
    "72347",
    "74492",
    "74494",
    "72391",
    "72392",
    "72399",
    "72123",
    "72122",
    "72129",
    "72196",
    "72199",
    "7521",
    "75997",
    "7471",
    "7472",
    "7473",
    "7474",
    "7478",
    "7479",
    "7461",
    "7462",
    "7463",
    "7464",
    "7465",
    "7468",
    "74691",
    "74699",
    "7481",
    "74821",
    "74822",
    "7484",
    "7485",
    "7486",
    "7489",
    "7492",
    "7161",
    "71631",
    "7162",
    "77119",
    "77121",
    "77881",
    "77811",
    "77812",
    "77819",
    "77848",
    "77831",
    "77833",
    "77834",
    "77835",
    "77588",
    "76413",
    "76417",
    "76491",
    "76421",
    "76422",
    "76423",
    "76425",
    "76426",
    "76492",
    "76382",
    "76383",
    "76431",
    "76483",
    "76211",
    "76212",
    "76289",
    "76493",
    "77882",
    "77884",
    "77885",
    "77862",
    "77863",
    "77864",
    "77865",
    "77866",
    "77867",
    "77868",
    "77231",
    "77232",
    "77233",
    "77235",
    "7722",
    "77244",
    "77251",
    "77252",
    "77254",
    "77255",
    "77257",
    "77258",
    "77259",
    "77261",
    "77281",
    "77282",
    "77823",
    "77821",
    "77822",
    "77829",
    "77637",
    "77645",
    "77649",
    "77878",
    "77312",
    "77313",
    "77314",
    "77886",
    "77323",
    "77324",
    "77326",
    "77328",
    "77329",
    "72241",
    "7832",
    "7223",
    "72249",
    "78311",
    "78319",
    "7812",
    "78211",
    "78219",
    "78221",
    "78223",
    "78225",
    "78227",
    "78229",
    "7841",
    "78421",
    "78425",
    "78431",
    "78432",
    "78433",
    "78434",
    "78435",
    "78436",
    "78439",
    "78621",
    "78622",
    "78629",
    "78683",
    "78685",
    "78689",
    "87413",
    "87455",
    "87456",
    "87431",
    "87435",
    "87437",
    "87439",
    "87441",
    "87445",
    "87449",
    "87313",
    "87321",
    "87325",
    "87329",
    "87475",
    "87479",
    "87425",
    "87426",
    "87461",
    "87463",
    "87465",
    "87469",
    "88571",
    "88596",
    "88599",
    "82112",
    "82118",
    "82119",
    "89972",
    "89933",
    "89935",
]
lista_sh6 = [
    "170111",
    "170112",
    "170191",
    "170199",
    "381512",
    "391690",
    "391721",
    "391722",
    "391723",
    "391729",
    "391732",
    "391733",
    "391739",
    "391740",
    "391810",
    "391990",
    "392030",
    "392330",
    "392350",
    "392630",
    "400690",
    "400811",
    "400821",
    "400829",
    "400910",
    "400920",
    "400930",
    "400940",
    "400950",
    "401021",
    "401110",
    "401120",
    "401191",
    "401199",
    "401290",
    "401310",
    "401390",
    "401610",
    "401691",
    "401693",
    "401699",
    "420400",
    "450390",
    "450490",
    "480540",
    "482320",
    "482370",
    "482390",
    "491110",
    "570490",
    "570500",
    "591190",
    "630790",
    "681210",
    "681220",
    "681290",
    "681310",
    "681390",
    "681510",
    "690919",
    "700711",
    "700721",
    "700910",
    "700991",
    "701400",
    "730431",
    "730439",
    "730451",
    "730459",
    "730490",
    "730630",
    "730640",
    "730650",
    "730711",
    "730719",
    "730721",
    "730722",
    "730791",
    "730792",
    "730793",
    "730799",
    "731100",
    "731210",
    "731511",
    "731512",
    "731519",
    "731520",
    "731700",
    "731813",
    "731814",
    "731815",
    "731816",
    "731819",
    "731821",
    "731822",
    "731823",
    "731824",
    "731829",
    "732010",
    "732020",
    "732090",
    "732510",
    "732599",
    "732619",
    "732620",
    "732690",
    "741110",
    "741121",
    "741122",
    "741129",
    "741210",
    "741220",
    "741521",
    "741529",
    "741531",
    "741532",
    "741539",
    "741600",
    "741999",
    "750712",
    "760421",
    "760429",
    "760810",
    "760820",
    "760900",
    "761300",
    "761610",
    "820411",
    "820840",
    "830120",
    "830150",
    "830160",
    "830170",
    "830210",
    "830230",
    "830710",
    "830790",
    "830810",
    "830820",
    "830990",
    "831000",
    "840733",
    "840734",
    "840790",
    "840820",
    "840890",
    "840991",
    "840999",
    "841221",
    "841229",
    "841231",
    "841239",
    "841290",
    "841319",
    "841320",
    "841330",
    "841350",
    "841360",
    "841370",
    "841381",
    "841391",
    "841392",
    "841410",
    "841430",
    "841440",
    "841459",
    "841480",
    "841490",
    "841520",
    "841583",
    "841590",
    "841861",
    "841869",
    "841899",
    "841950",
    "841989",
    "842123",
    "842129",
    "842131",
    "842139",
    "842199",
    "842481",
    "842489",
    "842490",
    "842542",
    "842549",
    "842691",
    "842911",
    "842919",
    "842920",
    "842930",
    "842940",
    "842951",
    "842952",
    "842959",
    "843031",
    "843041",
    "843050",
    "843062",
    "843069",
    "843120",
    "843139",
    "843141",
    "843142",
    "843149",
    "843320",
    "843351",
    "843352",
    "843353",
    "843359",
    "843390",
    "843680",
    "843699",
    "847110",
    "847330",
    "848110",
    "848120",
    "848130",
    "848140",
    "848180",
    "848190",
    "848210",
    "848220",
    "848230",
    "848240",
    "848250",
    "848280",
    "848291",
    "848299",
    "848310",
    "848320",
    "848330",
    "848340",
    "848350",
    "848360",
    "848390",
    "848410",
    "848490",
    "850110",
    "850120",
    "850131",
    "850132",
    "850140",
    "850152",
    "850153",
    "850431",
    "850440",
    "850511",
    "850519",
    "850520",
    "850530",
    "850590",
    "850650",
    "850710",
    "850720",
    "850730",
    "850740",
    "850780",
    "850790",
    "850890",
    "851110",
    "851120",
    "851130",
    "851140",
    "851150",
    "851180",
    "851190",
    "851220",
    "851230",
    "851240",
    "851290",
    "851680",
    "851722",
    "851750",
    "851790",
    "851810",
    "851821",
    "851829",
    "851840",
    "851850",
    "851890",
    "851940",
    "851999",
    "852510",
    "852610",
    "852691",
    "852692",
    "852721",
    "852729",
    "852739",
    "852910",
    "852990",
    "853080",
    "853110",
    "853190",
    "853221",
    "853222",
    "853223",
    "853224",
    "853225",
    "853229",
    "853230",
    "853310",
    "853321",
    "853329",
    "853331",
    "853339",
    "853340",
    "853400",
    "853530",
    "853610",
    "853620",
    "853641",
    "853649",
    "853650",
    "853661",
    "853669",
    "853690",
    "853710",
    "853810",
    "853890",
    "853910",
    "853921",
    "853929",
    "853939",
    "853990",
    "854140",
    "854240",
    "854250",
    "854320",
    "854420",
    "854430",
    "854441",
    "854449",
    "854520",
    "854620",
    "854690",
    "854710",
    "854720",
    "854790",
    "870110",
    "870120",
    "870130",
    "870190",
    "870210",
    "870290",
    "870321",
    "870322",
    "870323",
    "870324",
    "870331",
    "870332",
    "870333",
    "870390",
    "870410",
    "870421",
    "870422",
    "870423",
    "870431",
    "870432",
    "870490",
    "870510",
    "870520",
    "870530",
    "870540",
    "870590",
    "870600",
    "870710",
    "870790",
    "870810",
    "870821",
    "870829",
    "870831",
    "870839",
    "870840",
    "870850",
    "870860",
    "870870",
    "870880",
    "870891",
    "870892",
    "870893",
    "870894",
    "870899",
    "871620",
    "871631",
    "871639",
    "871640",
    "871680",
    "871690",
    "901580",
    "902511",
    "902519",
    "902590",
    "902610",
    "902620",
    "902680",
    "902690",
    "902710",
    "902750",
    "902790",
    "902820",
    "902910",
    "902920",
    "902990",
    "903039",
    "903090",
    "903180",
    "903190",
    "903210",
    "903220",
    "903289",
    "903290",
    "910400",
    "910911",
    "910919",
    "911410",
    "911490",
    "940120",
    "940180",
    "940190",
    "960350",
    "961330",
    "961380",
    "961390",
]

# Ajuste de HS
hs92_hs96 = pd.read_excel("hs_92_96.xlsx", dtype=str)
hs92_hs96 = hs92_hs96.query("hs_96 in @lista_sh6")
hs_92 = list(hs92_hs96["hs_92"].unique())
hs_96 = list(hs92_hs96["hs_96"].unique())
hs96_hs_2002 = pd.read_excel("hs_96_2002.xlsx", dtype=str)
hs96_hs_2002 = hs96_hs_2002.query("hs_96 in @hs_96")
hs_2002 = list(hs96_hs_2002["hs_2002"].unique())
hs_2002_hs_2007 = pd.read_excel("hs_2002_2007.xlsx", dtype=str)
hs_2002_hs_2007 = hs_2002_hs_2007.query("hs_2002 in @hs_2002")
hs_2007 = list(hs_2002_hs_2007["hs_2007"].unique())
hs_2007_hs_2012 = pd.read_excel("hs_2007_2012.xlsx", dtype=str)
hs_2007_hs_2012 = hs_2007_hs_2012.query("hs_2007 in @hs_2007")
hs_2012 = list(hs_2007_hs_2012["hs_2012"].unique())
hs_2012_hs_2017 = pd.read_excel("hs_2012_2017.xlsx", dtype=str)
hs_2012_hs_2017 = hs_2012_hs_2017.query("hs_2012 in @hs_2012")
hs_2017 = list(hs_2012_hs_2017["hs_2017"].unique())
hs_2017_hs_2022 = pd.read_excel("hs_2017_2022.xlsx", dtype=str)
hs_2017_hs_2022 = hs_2017_hs_2022.query("hs_2017 in @hs_2017")
hs_2022 = list(hs_2017_hs_2022["hs_2022"].unique())
todos_hs = list(set(hs_92 + hs_96 + hs_2002 + hs_2007 + hs_2012 + hs_2017 + hs_2022))
hs_sitc = pd.read_excel("hs_sitc.xlsx", dtype=str).query("hs in @todos_hs")
df_todos_hs = pd.DataFrame(todos_hs, columns=["hs"]).to_excel(
    "todos_hs.xlsx", index=False
)
sitc_totais = list(hs_sitc["sitc"].unique())
# %%
# df_sitc_totais = pd.DataFrame(sitc_totais, columns=["sitc"]).to_excel("sitc_totais.xlsx", index=False)
df_sitc_todos = pd.read_excel("todos_hs_ajust.xlsx", dtype=str)
sitc_1 = list(df_sitc_todos["sitc_1"].unique())
sitc_2 = list(df_sitc_todos["sitc_2"].unique())
sitc_3 = list(df_sitc_todos["sitc_3"].unique())
sitc_4 = [x for x in list(df_sitc_todos["sitc_4"].unique()) if pd.notna(x)]
sitc_1_2_3 = list(set(sitc_1 + sitc_2 + sitc_3))
sitc_2_3_4 = list(set(sitc_2 + sitc_3 + sitc_4))
sitc_3_4 = list(set(sitc_3 + sitc_4))
sitc_2_3 = list(set(sitc_2 + sitc_3))
sitc_1_2_3_4 = list(set(sitc_1 + sitc_2 + sitc_3 + sitc_4))
cols = [
    "refYear",
    "reporterCode",
    "reporterDesc",
    "partnerCode",
    "partnerDesc",
    "flowDesc",
    "cmdCode",
    "cifvalue",
    "fobvalue",
]
# %%
sitc_1_3dg = list(df_sitc_todos["sitc_1_3dg"].unique())
sitc_2_3dg = list(df_sitc_todos["sitc_2_3dg"].unique())
sitc_3_3dg = list(df_sitc_todos["sitc_3_3dg"].unique())
sitc_4_3dg = [x for x in list(df_sitc_todos["sitc_4_3dg"].unique()) if pd.notna(x)]
sitc_1_2_3_4_3dg = list(set(sitc_1_3dg + sitc_2_3dg + sitc_3_3dg + sitc_4_3dg))


def get_comtrade_data(anos, lista_codigo, categoria_codigo, partner, aggregacao):
    """
    Busca dados da API Comtrade para os anos e códigos de categoria especificados.

    Args:
        anos (list): Uma lista de anos para buscar dados.
        lista_codigo (list): Uma lista de códigos de produtos (por exemplo, SITC) para buscar.
        categoria_codigo (str): O código da classificação (por exemplo, "S1" para SITC Rev. 1).

    Returns:
        pandas.DataFrame: Um DataFrame contendo os dados brutos compilados,
                          com uma coluna 'classificacao' adicionada.
                          Retorna um DataFrame vazio se nenhum dado for encontrado.
    """
    lista_df = []

    for ano in anos:
        dfs_para_o_ano_atual = []
        tamanho_lote = 10

        for i in range(0, len(lista_codigo), tamanho_lote):
            lote_de_codigos = lista_codigo[i : i + tamanho_lote]
            cmd_code_lote_string = ",".join(lote_de_codigos)
            if not cmd_code_lote_string:
                continue

            try:
                # Assumindo que 'subscription_key' e 'comtradeapicall' estão definidos globalmente
                df_lote = comtradeapicall.getFinalData(
                    subscription_key,
                    typeCode="C",
                    freqCode="A",
                    clCode=categoria_codigo,  # Usando o parâmetro categoria_codigo
                    cmdCode=cmd_code_lote_string,
                    flowCode="X,M",
                    reporterCode=None,
                    partnerCode=partner,
                    partner2Code=None,
                    customsCode=None,
                    motCode=None,
                    maxRecords=None,
                    breakdownMode="classic",
                    countOnly=None,
                    aggregateBy=aggregacao,
                    includeDesc=True,
                    period=str(ano),
                )

                if df_lote is not None and not df_lote.empty:
                    dfs_para_o_ano_atual.append(df_lote)
                    print(
                        f"    Lote {i // tamanho_lote + 1} retornou {len(df_lote)} registros."
                    )
                else:
                    print(
                        f"    Lote {i // tamanho_lote + 1} não retornou dados ou retornou None."
                    )

            except Exception as e:
                print(
                    f"    Erro ao buscar dados para o lote {i // tamanho_lote + 1}: {e}"
                )

        if dfs_para_o_ano_atual:
            df_ano_completo = pd.concat(dfs_para_o_ano_atual, ignore_index=True)
            lista_df.append(df_ano_completo)
            print(
                f"    Dados para o ano {ano} compilados: {len(df_ano_completo)} registros totais."
            )
        else:
            print(f"    Nenhum dado compilado para o ano {ano}.")

    if lista_df:
        df_raw = pd.concat(lista_df, ignore_index=True)
        # Assumindo que 'cols' está definido globalmente ou é uma lista de colunas esperadas
        df = df_raw[cols].assign(classificacao=categoria_codigo)
        return df
    else:
        return (
            pd.DataFrame()
        )  # Retorna um DataFrame vazio se nenhum dado for encontrado


df_sitc_1_2_3_4_3dg = pd.DataFrame(sitc_1_2_3_4_3dg, columns=["cmdCode"]).to_excel(
    "sitc_1_2_3_4_3dg.xlsx", index=False, engine="openpyxl"
)
# %%
anos = range(1962, 2024)
df_sitc_1_3dg = get_comtrade_data(
    anos=anos,
    lista_codigo=sitc_1_3dg,
    partner=None,
    categoria_codigo="S1",
    aggregacao="cmdCode",
)

df_sitc_2_3dg = get_comtrade_data(
    anos=anos,
    lista_codigo=sitc_2_3dg,
    partner=None,
    categoria_codigo="S2",
    aggregacao="cmdCode",
)

df_sitc_3_3dg = get_comtrade_data(
    anos=anos,
    lista_codigo=sitc_3_3dg,
    partner=None,
    categoria_codigo="S3",
    aggregacao="cmdCode",
)

df_sitc_4_3dg = get_comtrade_data(
    anos=anos,
    lista_codigo=sitc_4_3dg,
    partner=None,
    categoria_codigo="S4",
    aggregacao="cmdCode",
)
# %%
anos = range(1962, 2024)
df_sitc_SS = get_comtrade_data(
    anos=anos,
    lista_codigo=sitc_1_2_3_4_3dg,
    partner=None,
    categoria_codigo="SS",
    aggregacao=None,
)

# %%

(df_sitc_SS.query("refYear > 1999")).to_excel(
    "dados_comtrade_sitc_SS_2000_2023.xlsx", index=False, engine="openpyxl"
)

# %%
df_final = pd.concat(
    [
        df_sitc_1_3dg,
        df_sitc_2_3dg,
        df_sitc_3_3dg,
        df_sitc_4_3dg,
        df_sitc_SS,
    ],
    ignore_index=True,
).to_excel("dados_comtrade_sitc_3dg.xlsx", index=False, engine="openpyxl")

# %%
df_final = pd.read_csv("dados_comtrade_sitc_3dg.csv", dtype={"cmdCode": str})

# %%


def ajuste_tradutor(df, tipo_sitc, desc_sitc, classificacao):
    return (
        df[[tipo_sitc, desc_sitc]]
        .assign(classificacao=classificacao)
        .assign(cod_classificacao=lambda x: (x[tipo_sitc] + "_" + x["classificacao"]))
        .rename(columns={tipo_sitc: "cod_sitc", desc_sitc: "desc_sitc"})
    )


trad_sitc_1 = ajuste_tradutor(df_sitc_todos, "sitc_1", "desc_sitc_1", "S1")
trad_sitc_2 = ajuste_tradutor(df_sitc_todos, "sitc_2", "desc_sitc_2", "S2")
trad_sitc_3 = ajuste_tradutor(df_sitc_todos, "sitc_3", "desc_sitc_3", "S3")
trad_sitc_4 = ajuste_tradutor(df_sitc_todos, "sitc_4", "desc_sitc_4", "S4")
trad_sitc = pd.concat(
    [
        trad_sitc_1,
        trad_sitc_2,
        trad_sitc_3,
        trad_sitc_4,
    ],
    ignore_index=True,
)

# %%
# %%
(
    df_final.query("flowDesc == 'Export' & refYear > 2000 & refYear < 2007")
    .groupby(
        ["classificacao", "cmdCode", "refYear", "reporterDesc"],
        as_index=False,
    )
    .agg({"fobvalue": "sum"})
    .pivot(
        index=["refYear", "cmdCode", "reporterDesc"],
        columns="classificacao",
        values="fobvalue",
    )
    .reset_index()
).to_excel("comtrade_sitc_export_2001_2007.xlsx", index=False, engine="openpyxl")
